/* tslint:disable */
/* eslint-disable */
/**
 * ForestVPN Cloud API
 * ForestVPN Cloud - it's a Google Cloud but for VPN apps. Ready to use VPN Cloud Platform minimizes efforts to build fast, secure, and modern VPN apps. 
 *
 * OpenAPI spec version: 2.0
 * Contact: support@forestvpn.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CreateOrUpdateDataUsageLimitRequest } from '../models';
import { CreateOrUpdateProfileRequest } from '../models';
import { DataUsageLimit } from '../models';
import { Profile } from '../models';
import { ProfileStats } from '../models';
/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create profile
         * @param {CreateOrUpdateProfileRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile: async (body?: CreateOrUpdateProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create profile data usage limit
         * @param {string} profileId 
         * @param {CreateOrUpdateDataUsageLimitRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfileDataUsageLimit: async (profileId: string, body?: CreateOrUpdateDataUsageLimitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling createProfileDataUsageLimit.');
            }
            const localVarPath = `/profiles/{profileId}/limits/data-usages/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes profile and all associated resources
         * @summary Delete profile
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfile: async (profileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling deleteProfile.');
            }
            const localVarPath = `/profiles/{profileId}/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete profile data usage limit
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProfileDataUsageLimit: async (profileId: string, limitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling deleteProfileDataUsageLimit.');
            }
            // verify required parameter 'limitId' is not null or undefined
            if (limitId === null || limitId === undefined) {
                throw new RequiredError('limitId','Required parameter limitId was null or undefined when calling deleteProfileDataUsageLimit.');
            }
            const localVarPath = `/profiles/{profileId}/limits/data-usages/{limitId}/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"limitId"}}`, encodeURIComponent(String(limitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Profile details
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (profileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling getProfile.');
            }
            const localVarPath = `/profiles/{profileId}/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Profile data usage limit details
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileDataUsageLimit: async (profileId: string, limitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling getProfileDataUsageLimit.');
            }
            // verify required parameter 'limitId' is not null or undefined
            if (limitId === null || limitId === undefined) {
                throw new RequiredError('limitId','Required parameter limitId was null or undefined when calling getProfileDataUsageLimit.');
            }
            const localVarPath = `/profiles/{profileId}/limits/data-usages/{limitId}/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"limitId"}}`, encodeURIComponent(String(limitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Profile data usage limits list
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProfileDataUsageLimits: async (profileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling listProfileDataUsageLimits.');
            }
            const localVarPath = `/profiles/{profileId}/limits/data-usages/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Profile stats list
         * @param {string} profileId 
         * @param {string} [aggregate_by] 
         * @param {string} [date_after] 
         * @param {string} [date_before] 
         * @param {number} [per_page] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProfileStats: async (profileId: string, aggregate_by?: string, date_after?: string, date_before?: string, per_page?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling listProfileStats.');
            }
            const localVarPath = `/profiles/{profileId}/stats/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            if (aggregate_by !== undefined) {
                localVarQueryParameter['aggregate_by'] = aggregate_by;
            }

            if (date_after !== undefined) {
                localVarQueryParameter['date_after'] = (date_after as any instanceof Date) ?
                    (date_after as any).toISOString().substr(0,10) :
                    date_after;
            }

            if (date_before !== undefined) {
                localVarQueryParameter['date_before'] = (date_before as any instanceof Date) ?
                    (date_before as any).toISOString().substr(0,10) :
                    date_before;
            }

            if (per_page !== undefined) {
                localVarQueryParameter['per_page'] = per_page;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Profile list
         * @param {string} [external_key] 
         * @param {number} [per_page] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProfiles: async (external_key?: string, per_page?: number, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profiles/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            if (external_key !== undefined) {
                localVarQueryParameter['external_key'] = external_key;
            }

            if (per_page !== undefined) {
                localVarQueryParameter['per_page'] = per_page;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partial update profile details
         * @param {CreateOrUpdateProfileRequest} body 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateProfile: async (body: CreateOrUpdateProfileRequest, profileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling partialUpdateProfile.');
            }
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling partialUpdateProfile.');
            }
            const localVarPath = `/profiles/{profileId}/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Partial update profile data usage limit
         * @param {CreateOrUpdateDataUsageLimitRequest} body 
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateProfileDataUsageLimit: async (body: CreateOrUpdateDataUsageLimitRequest, profileId: string, limitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling partialUpdateProfileDataUsageLimit.');
            }
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling partialUpdateProfileDataUsageLimit.');
            }
            // verify required parameter 'limitId' is not null or undefined
            if (limitId === null || limitId === undefined) {
                throw new RequiredError('limitId','Required parameter limitId was null or undefined when calling partialUpdateProfileDataUsageLimit.');
            }
            const localVarPath = `/profiles/{profileId}/limits/data-usages/{limitId}/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"limitId"}}`, encodeURIComponent(String(limitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update profile details
         * @param {CreateOrUpdateProfileRequest} body 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfile: async (body: CreateOrUpdateProfileRequest, profileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateProfile.');
            }
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling updateProfile.');
            }
            const localVarPath = `/profiles/{profileId}/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update profile data usage limit
         * @param {CreateOrUpdateDataUsageLimitRequest} body 
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProfileDataUsageLimit: async (body: CreateOrUpdateDataUsageLimitRequest, profileId: string, limitId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateProfileDataUsageLimit.');
            }
            // verify required parameter 'profileId' is not null or undefined
            if (profileId === null || profileId === undefined) {
                throw new RequiredError('profileId','Required parameter profileId was null or undefined when calling updateProfileDataUsageLimit.');
            }
            // verify required parameter 'limitId' is not null or undefined
            if (limitId === null || limitId === undefined) {
                throw new RequiredError('limitId','Required parameter limitId was null or undefined when calling updateProfileDataUsageLimit.');
            }
            const localVarPath = `/profiles/{profileId}/limits/data-usages/{limitId}/`
                .replace(`{${"profileId"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"limitId"}}`, encodeURIComponent(String(limitId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiTokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-API-TOKEN")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-API-TOKEN"] = localVarApiKeyValue;
            }

            // authentication BearerTokenAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create profile
         * @param {CreateOrUpdateProfileRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProfile(body?: CreateOrUpdateProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Profile>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).createProfile(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Create profile data usage limit
         * @param {string} profileId 
         * @param {CreateOrUpdateDataUsageLimitRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProfileDataUsageLimit(profileId: string, body?: CreateOrUpdateDataUsageLimitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DataUsageLimit>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).createProfileDataUsageLimit(profileId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes profile and all associated resources
         * @summary Delete profile
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProfile(profileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).deleteProfile(profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Delete profile data usage limit
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProfileDataUsageLimit(profileId: string, limitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).deleteProfileDataUsageLimit(profileId, limitId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Profile details
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(profileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Profile>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).getProfile(profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Profile data usage limit details
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileDataUsageLimit(profileId: string, limitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DataUsageLimit>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).getProfileDataUsageLimit(profileId, limitId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Profile data usage limits list
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProfileDataUsageLimits(profileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<DataUsageLimit>>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).listProfileDataUsageLimits(profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Profile stats list
         * @param {string} profileId 
         * @param {string} [aggregate_by] 
         * @param {string} [date_after] 
         * @param {string} [date_before] 
         * @param {number} [per_page] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProfileStats(profileId: string, aggregate_by?: string, date_after?: string, date_before?: string, per_page?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ProfileStats>>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).listProfileStats(profileId, aggregate_by, date_after, date_before, per_page, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Profile list
         * @param {string} [external_key] 
         * @param {number} [per_page] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProfiles(external_key?: string, per_page?: number, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Profile>>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).listProfiles(external_key, per_page, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Partial update profile details
         * @param {CreateOrUpdateProfileRequest} body 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateProfile(body: CreateOrUpdateProfileRequest, profileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Profile>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).partialUpdateProfile(body, profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Partial update profile data usage limit
         * @param {CreateOrUpdateDataUsageLimitRequest} body 
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateProfileDataUsageLimit(body: CreateOrUpdateDataUsageLimitRequest, profileId: string, limitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DataUsageLimit>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).partialUpdateProfileDataUsageLimit(body, profileId, limitId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update profile details
         * @param {CreateOrUpdateProfileRequest} body 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfile(body: CreateOrUpdateProfileRequest, profileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Profile>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).updateProfile(body, profileId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update profile data usage limit
         * @param {CreateOrUpdateDataUsageLimitRequest} body 
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfileDataUsageLimit(body: CreateOrUpdateDataUsageLimitRequest, profileId: string, limitId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<DataUsageLimit>>> {
            const localVarAxiosArgs = await ProfilesApiAxiosParamCreator(configuration).updateProfileDataUsageLimit(body, profileId, limitId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Create profile
         * @param {CreateOrUpdateProfileRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProfile(body?: CreateOrUpdateProfileRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<Profile>> {
            return ProfilesApiFp(configuration).createProfile(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create profile data usage limit
         * @param {string} profileId 
         * @param {CreateOrUpdateDataUsageLimitRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProfileDataUsageLimit(profileId: string, body?: CreateOrUpdateDataUsageLimitRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<DataUsageLimit>> {
            return ProfilesApiFp(configuration).createProfileDataUsageLimit(profileId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes profile and all associated resources
         * @summary Delete profile
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProfile(profileId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProfilesApiFp(configuration).deleteProfile(profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete profile data usage limit
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProfileDataUsageLimit(profileId: string, limitId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return ProfilesApiFp(configuration).deleteProfileDataUsageLimit(profileId, limitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Profile details
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(profileId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Profile>> {
            return ProfilesApiFp(configuration).getProfile(profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Profile data usage limit details
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileDataUsageLimit(profileId: string, limitId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DataUsageLimit>> {
            return ProfilesApiFp(configuration).getProfileDataUsageLimit(profileId, limitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Profile data usage limits list
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProfileDataUsageLimits(profileId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<DataUsageLimit>>> {
            return ProfilesApiFp(configuration).listProfileDataUsageLimits(profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Profile stats list
         * @param {string} profileId 
         * @param {string} [aggregate_by] 
         * @param {string} [date_after] 
         * @param {string} [date_before] 
         * @param {number} [per_page] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProfileStats(profileId: string, aggregate_by?: string, date_after?: string, date_before?: string, per_page?: number, page?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ProfileStats>>> {
            return ProfilesApiFp(configuration).listProfileStats(profileId, aggregate_by, date_after, date_before, per_page, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Profile list
         * @param {string} [external_key] 
         * @param {number} [per_page] 
         * @param {number} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProfiles(external_key?: string, per_page?: number, page?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Profile>>> {
            return ProfilesApiFp(configuration).listProfiles(external_key, per_page, page, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partial update profile details
         * @param {CreateOrUpdateProfileRequest} body 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateProfile(body: CreateOrUpdateProfileRequest, profileId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Profile>> {
            return ProfilesApiFp(configuration).partialUpdateProfile(body, profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Partial update profile data usage limit
         * @param {CreateOrUpdateDataUsageLimitRequest} body 
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdateProfileDataUsageLimit(body: CreateOrUpdateDataUsageLimitRequest, profileId: string, limitId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DataUsageLimit>> {
            return ProfilesApiFp(configuration).partialUpdateProfileDataUsageLimit(body, profileId, limitId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update profile details
         * @param {CreateOrUpdateProfileRequest} body 
         * @param {string} profileId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfile(body: CreateOrUpdateProfileRequest, profileId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Profile>> {
            return ProfilesApiFp(configuration).updateProfile(body, profileId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update profile data usage limit
         * @param {CreateOrUpdateDataUsageLimitRequest} body 
         * @param {string} profileId 
         * @param {string} limitId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProfileDataUsageLimit(body: CreateOrUpdateDataUsageLimitRequest, profileId: string, limitId: string, options?: AxiosRequestConfig): Promise<AxiosResponse<DataUsageLimit>> {
            return ProfilesApiFp(configuration).updateProfileDataUsageLimit(body, profileId, limitId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     * 
     * @summary Create profile
     * @param {CreateOrUpdateProfileRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async createProfile(body?: CreateOrUpdateProfileRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<Profile>> {
        return ProfilesApiFp(this.configuration).createProfile(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Create profile data usage limit
     * @param {string} profileId 
     * @param {CreateOrUpdateDataUsageLimitRequest} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async createProfileDataUsageLimit(profileId: string, body?: CreateOrUpdateDataUsageLimitRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<DataUsageLimit>> {
        return ProfilesApiFp(this.configuration).createProfileDataUsageLimit(profileId, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes profile and all associated resources
     * @summary Delete profile
     * @param {string} profileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async deleteProfile(profileId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProfilesApiFp(this.configuration).deleteProfile(profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Delete profile data usage limit
     * @param {string} profileId 
     * @param {string} limitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async deleteProfileDataUsageLimit(profileId: string, limitId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return ProfilesApiFp(this.configuration).deleteProfileDataUsageLimit(profileId, limitId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Profile details
     * @param {string} profileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async getProfile(profileId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Profile>> {
        return ProfilesApiFp(this.configuration).getProfile(profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Profile data usage limit details
     * @param {string} profileId 
     * @param {string} limitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async getProfileDataUsageLimit(profileId: string, limitId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DataUsageLimit>> {
        return ProfilesApiFp(this.configuration).getProfileDataUsageLimit(profileId, limitId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Profile data usage limits list
     * @param {string} profileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async listProfileDataUsageLimits(profileId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<DataUsageLimit>>> {
        return ProfilesApiFp(this.configuration).listProfileDataUsageLimits(profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Profile stats list
     * @param {string} profileId 
     * @param {string} [aggregate_by] 
     * @param {string} [date_after] 
     * @param {string} [date_before] 
     * @param {number} [per_page] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async listProfileStats(profileId: string, aggregate_by?: string, date_after?: string, date_before?: string, per_page?: number, page?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ProfileStats>>> {
        return ProfilesApiFp(this.configuration).listProfileStats(profileId, aggregate_by, date_after, date_before, per_page, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Profile list
     * @param {string} [external_key] 
     * @param {number} [per_page] 
     * @param {number} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async listProfiles(external_key?: string, per_page?: number, page?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Profile>>> {
        return ProfilesApiFp(this.configuration).listProfiles(external_key, per_page, page, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Partial update profile details
     * @param {CreateOrUpdateProfileRequest} body 
     * @param {string} profileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async partialUpdateProfile(body: CreateOrUpdateProfileRequest, profileId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Profile>> {
        return ProfilesApiFp(this.configuration).partialUpdateProfile(body, profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Partial update profile data usage limit
     * @param {CreateOrUpdateDataUsageLimitRequest} body 
     * @param {string} profileId 
     * @param {string} limitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async partialUpdateProfileDataUsageLimit(body: CreateOrUpdateDataUsageLimitRequest, profileId: string, limitId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DataUsageLimit>> {
        return ProfilesApiFp(this.configuration).partialUpdateProfileDataUsageLimit(body, profileId, limitId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update profile details
     * @param {CreateOrUpdateProfileRequest} body 
     * @param {string} profileId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async updateProfile(body: CreateOrUpdateProfileRequest, profileId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Profile>> {
        return ProfilesApiFp(this.configuration).updateProfile(body, profileId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Update profile data usage limit
     * @param {CreateOrUpdateDataUsageLimitRequest} body 
     * @param {string} profileId 
     * @param {string} limitId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public async updateProfileDataUsageLimit(body: CreateOrUpdateDataUsageLimitRequest, profileId: string, limitId: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<DataUsageLimit>> {
        return ProfilesApiFp(this.configuration).updateProfileDataUsageLimit(body, profileId, limitId, options).then((request) => request(this.axios, this.basePath));
    }
}
